<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Food Cart Supply System</title>
    <script src="https://www.gstatic.com/dialogflow-console/fast/messenger-cx/bootstrap.js?v=1"></script>
    <script src="https://cdn.jsdelivr.net/npm/@google/generative-ai"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        
        /* Common chat styles */
        .chat-container {
            width: 90%;
            max-width: 500px;
            height: 80vh;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .chat-header {
            color: white;
            padding: 15px;
            text-align: center;
            font-weight: bold;
            font-size: 1.2rem;
        }
        
        .chat-messages {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .message {
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 18px;
            line-height: 1.4;
            word-wrap: break-word;
        }
        
        .bot-message {
            background-color: #e5e5ea;
            align-self: flex-start;
            border-bottom-left-radius: 5px;
        }
        
        .user-message {
            color: white;
            align-self: flex-end;
            border-bottom-right-radius: 5px;
        }
        
        .quick-reply {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 5px;
        }
        
        .quick-reply-btn {
            background-color: #f0f0f0;
            border: none;
            border-radius: 15px;
            padding: 5px 12px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .quick-reply-btn:hover {
            background-color: #e0e0e0;
        }
        
        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #eee;
        }
        
        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }
        
        .chat-input button {
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin-left: 10px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        /* VendorBot specific styles */
        .vendor-bot .chat-header {
            background-color: #4CAF50;
        }
        
        .vendor-bot .user-message {
            background-color: #4CAF50;
        }
        
        .vendor-bot .chat-input button {
            background-color: #4CAF50;
        }
        
        .material-option {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .material-option:hover {
            background-color: #f9f9f9;
        }
        
        .material-option h4 {
            margin: 0 0 5px 0;
            color: #4CAF50;
        }
        
        .material-details {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
        }
        
        .bargaining-message {
            font-style: italic;
            color: #666;
        }
        
        .deal-closed {
            background-color: #dff0d8;
            border-left: 4px solid #3c763d;
            padding: 10px;
            margin-top: 10px;
        }
        
        /* SupplierBot specific styles */
        .supplier-bot .chat-header {
            background-color: #2196F3;
        }
        
        .supplier-bot .user-message {
            background-color: #2196F3;
        }
        
        .supplier-bot .chat-input button {
            background-color: #2196F3;
        }
        
        .category-btn {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .success-message {
            background-color: #dff0d8;
            border-left: 4px solid #3c763d;
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        /* Switch link */
        .switch-link {
            text-align: center;
            margin-top: 10px;
        }
        
        .switch-link a {
            color: #2196F3;
            text-decoration: none;
            font-weight: bold;
        }
        
        /* Hidden class */
        .hidden {
            display: none !important;
        }
        
        /* Loading spinner */
        .spinner {
            border: 3px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 3px solid #4CAF50;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- Vendor Bot Container -->
    <div class="chat-container vendor-bot" id="vendor-bot">
        <div class="chat-header">
            VendorBot - Food Cart Supplies
        </div>
        <div class="chat-messages" id="vendor-chat-messages">
            <!-- Messages will appear here -->
        </div>
        <div class="chat-input">
            <input type="text" id="vendor-user-input" placeholder="Type your message...">
            <button id="vendor-send-btn">→</button>
        </div>
        <div class="switch-link">
            <a href="#" id="supplier-link">Are you a Supplier?</a>
        </div>
    </div>

    <!-- Supplier Bot Container (initially hidden) -->
    <div class="chat-container supplier-bot hidden" id="supplier-bot">
        <div class="chat-header">
            SupplierBot - List Your Products
        </div>
        <div class="chat-messages" id="supplier-chat-messages">
            <!-- Messages will appear here -->
        </div>
        <div class="chat-input">
            <input type="text" id="supplier-user-input" placeholder="Type your message...">
            <button id="supplier-send-btn">→</button>
        </div>
        <div class="switch-link">
            <a href="#" id="vendor-link">Are you a Vendor?</a>
        </div>
    </div>

    <script>
        // Gemini API integration
const GEMINI_API_KEY = "AIzaSyBzYE95khwWrlXNIHQsNGA9xZDZQFykrYU"; // Replace with your actual API key

async function negotiateWithGemini(product, userOffer) {
    try {
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
        
        const systemInstruction = `You are a tough but fair Indian supplier negotiating for "${product.name}".
            Your listed price is ₹${product.standardPrice} per KG.
            You can accept a price between ₹${product.minPrice} and ₹${product.maxPrice}.
            Be conversational and use common Indian bargaining phrases. Respond in a mix of Hindi and English (Hinglish).
            If you agree on a price, you MUST end your response with the special token: DEAL_ACCEPTED:{final_price}. Do not include currency symbols in the token.
            Example: "Chalo theek hai, final price. DEAL_ACCEPTED:85"
            If you cannot accept the offer, make a counter-offer.
            The user's latest offer is: "${userOffer}"`;
        
        const chat = model.startChat({
            systemInstruction: systemInstruction
        });
        
        const result = await chat.sendMessage(userOffer);
        const response = await result.response;
        const text = response.text();
        
        return text;
    } catch (error) {
        console.error("Error with Gemini API:", error);
        return "Maaf kijiye, samasya hui. Kripya dobara koshish karein.";
    }
}
        // =============================================
        // Common Functions
        // =============================================
        
        function addUserMessage(container, message) {
            const messageElement = document.createElement("div");
            messageElement.classList.add("message", "user-message");
            messageElement.textContent = message;
            container.appendChild(messageElement);
            container.scrollTop = container.scrollHeight;
        }

        function addBotMessage(container, message, quickReplies = null) {
            const messageElement = document.createElement("div");
            messageElement.classList.add("message", "bot-message");
            messageElement.textContent = message;
            container.appendChild(messageElement);

            if (quickReplies) {
                const quickReplyContainer = document.createElement("div");
                quickReplyContainer.classList.add("quick-reply");
                
                quickReplies.forEach(reply => {
                    const button = document.createElement("button");
                    button.classList.add("quick-reply-btn");
                    
                    // Check if reply contains an emoji (for category buttons)
                    if (reply.match(/\p{Emoji}/u)) {
                        const span = document.createElement("span");
                        span.classList.add("category-btn");
                        span.innerHTML = reply;
                        button.appendChild(span);
                    } else {
                        button.textContent = reply;
                    }
                    
                    button.onclick = function() {
                        addUserMessage(container, reply);
                        if (container.id === 'vendor-chat-messages') {
                            handleVendorResponse(reply);
                        } else {
                            handleSupplierResponse(reply);
                        }
                    };
                    quickReplyContainer.appendChild(button);
                });
                
                container.appendChild(quickReplyContainer);
            }

            container.scrollTop = container.scrollHeight;
        }

        function validateEmail(email) {
            const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return re.test(email);
        }

        async function getCityFromPincode(pincode) {
            try {
                const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
                const data = await response.json();
                if (data[0].Status === "Success" && data[0].PostOffice) {
                    // Take the first post office entry's District as city
                    return data[0].PostOffice[0].District;
                }
                return null;
            } catch (error) {
                console.error("Error fetching pincode data:", error);
                return null;
            }
        }

        // =============================================
        // Vendor Bot Implementation
        // =============================================

        // Database simulation (using localStorage)
        let suppliersDatabase = JSON.parse(localStorage.getItem('suppliersDatabase')) || {
            "suppliers": [],
            "products": []
        };

        // Vendor Chat state
        let vendorChatState = {
            step: "welcome",
            selectedItem: null,
            pincode: null,
            city: null,
            quantity: null,
            minPrice: null,
            maxPrice: null,
            selectedMaterial: null,
            userEmail: null,
            bargaining: false,
            currentOffer: null
        };

        // DOM elements
        const vendorChatMessages = document.getElementById("vendor-chat-messages");
        const vendorUserInput = document.getElementById("vendor-user-input");
        const vendorSendBtn = document.getElementById("vendor-send-btn");

        // Initialize Vendor chat
        function initializeVendorBot() {
            addBotMessage(vendorChatMessages, "Namaste! Main aapka VendorBot hoon. Main aapko food cart ke liye raw material khareedne mein madad kar sakta hoon.");
            addBotMessage(vendorChatMessages, "Kya aap aj kuch khareedna chahenge?", [
                "Haan, onion khareedna hai",
                "Haan, tomato khareedna hai",
                "Haan, paneer khareedna hai",
                "Kuch aur khareedna hai"
            ]);
        }

        // Send message on button click
        vendorSendBtn.addEventListener("click", sendVendorMessage);

        // Send message on Enter key
        vendorUserInput.addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                sendVendorMessage();
            }
        });

        function sendVendorMessage() {
            const message = vendorUserInput.value.trim();
            if (message === "") return;

            addUserMessage(vendorChatMessages, message);
            vendorUserInput.value = "";

            handleVendorResponse(message);
        }

        async function handleVendorResponse(message) {
            switch (vendorChatState.step) {
                case "welcome":
                    if (message.includes("onion") || message === "Haan, onion khareedna hai") {
                        vendorChatState.selectedItem = "Onion";
                        askForPincode();
                    } else if (message.includes("tomato") || message === "Haan, tomato khareedna hai") {
                        vendorChatState.selectedItem = "Tomato";
                        askForPincode();
                    } else if (message.includes("paneer") || message === "Haan, paneer khareedna hai") {
                        vendorChatState.selectedItem = "Paneer";
                        askForPincode();
                    } else if (message === "Kuch aur khareedna hai") {
                        addBotMessage(vendorChatMessages, "Kripya bataein aap kya khareedna chahenge? (Example: Gobhi, Aalu, etc.)");
                        vendorChatState.step = "ask_custom_item";
                    } else {
                        vendorChatState.selectedItem = message;
                        askForPincode();
                    }
                    break;
                
                case "ask_custom_item":
                    vendorChatState.selectedItem = message;
                    askForPincode();
                    break;
                
                case "ask_pincode":
                    const pincode = message.split(" ").find(part => /^\d{6}$/.test(part));
                    if (pincode) {
                        vendorChatState.pincode = pincode;
                        
                        // Show loading message
                        const loadingMessage = document.createElement("div");
                        loadingMessage.classList.add("message", "bot-message");
                        loadingMessage.innerHTML = `<div style="display: flex; align-items: center; gap: 10px;">
                            <div class="spinner"></div>
                            <span>Pincode verify kar raha hoon...</span>
                        </div>`;
                        vendorChatMessages.appendChild(loadingMessage);
                        vendorChatMessages.scrollTop = vendorChatMessages.scrollHeight;
                        
                        try {
                            const city = await getCityFromPincode(pincode);
                            if (city) {
                                // Remove loading message
                                vendorChatMessages.removeChild(loadingMessage);
                                
                                vendorChatState.city = city;
                                addBotMessage(vendorChatMessages, `Dhanyavaad! Main aapke ${vendorChatState.city} mein suppliers dhundhunga.`);
                                askForQuantity();
                            } else {
                                vendorChatMessages.removeChild(loadingMessage);
                                addBotMessage(vendorChatMessages, "Mujhe is pincode se city nahi mil payi. Kripya sahi pincode daalein (6 digits).");
                            }
                        } catch (error) {
                            vendorChatMessages.removeChild(loadingMessage);
                            addBotMessage(vendorChatMessages, "Pincode verify karne mein samasya hui. Kripya dobara koshish karein.");
                        }
                    } else {
                        addBotMessage(vendorChatMessages, "Kripya sahi pincode daalein (6 digits). Example: 110001");
                    }
                    break;
                
                case "ask_quantity":
                    const quantityMatch = message.match(/\d+/);
                    if (quantityMatch) {
                        vendorChatState.quantity = parseInt(quantityMatch[0]);
                        askForPriceRange();
                    } else {
                        addBotMessage(vendorChatMessages, "Kripya sahi quantity daalein. Example: 5 KG ya 10 KG");
                    }
                    break;
                
                case "ask_price_range":
                    const priceRangeMatch = message.match(/(\d+)\s*-\s*(\d+)/);
                    if (priceRangeMatch) {
                        vendorChatState.minPrice = parseInt(priceRangeMatch[1]);
                        vendorChatState.maxPrice = parseInt(priceRangeMatch[2]);
                        showAvailableMaterials();
                    } else {
                        addBotMessage(vendorChatMessages, "Kripya sahi price range daalein. Example: 20-30");
                    }
                    break;
                
                case "show_materials":
                    if (message.toLowerCase().includes("nahi")) {
                        addBotMessage(vendorChatMessages, "Koi baat nahi. Kya aap kuch aur dekhna chahenge?", [
                            "Haan, nayi search karna hai",
                            "Nahi, baad mein"
                        ]);
                        vendorChatState.step = "new_search_decision";
                    } else {
                        const materialId = message.split(" ").find(part => /^\d+$/.test(part));
                        if (materialId) {
                            const material = findMaterialById(parseInt(materialId));
                            if (material) {
                                vendorChatState.selectedMaterial = material;
                                askForEmail();
                            } else {
                                addBotMessage(vendorChatMessages, "Kripya sahi option number daalein.");
                            }
                        } else {
                            addBotMessage(vendorChatMessages, "Kripya sahi option number daalein.");
                        }
                    }
                    break;
                
                case "ask_email":
                    if (validateEmail(message)) {
                        vendorChatState.userEmail = message;
                        startBargaining();
                    } else {
                        addBotMessage(vendorChatMessages, "Kripya sahi email ID daalein. Example: vendor@example.com");
                    }
                    break;
                
                case "bargaining":
                    handleBargaining(message);
                    break;
                
                case "new_search_decision":
                    if (message.includes("Haan")) {
                        resetVendorToWelcome();
                    } else {
                        addBotMessage(vendorChatMessages, "Dhanyavaad! Jab bhi zaroorat ho humse sampark karein.");
                    }
                    break;
                
                case "deal_closed":
                    if (message.includes("nayi search")) {
                        resetVendorToWelcome();
                    }
                    break;
            }
        }

        function askForPincode() {
            addBotMessage(vendorChatMessages, `Achha! Aap ${vendorChatState.selectedItem} khareedna chahte hain. Kripya apna pincode bataein taaki hum aapke sheher mein suppliers dhundh sakein.`);
            vendorChatState.step = "ask_pincode";
        }

        function askForQuantity() {
            addBotMessage(vendorChatMessages, `Aap kitne ${vendorChatState.selectedItem} khareedna chahte hain? (Example: 5 KG ya 10 KG)`);
            vendorChatState.step = "ask_quantity";
        }

        function askForPriceRange() {
            addBotMessage(vendorChatMessages, `Aap kis price range mein ${vendorChatState.selectedItem} khareedna chahte hain? (Example: 20-30)`);
            vendorChatState.step = "ask_price_range";
        }

        function showAvailableMaterials() {
            // Get products from the suppliers database that match the search criteria
            const availableMaterials = suppliersDatabase.products.filter(product => 
                product.name.toLowerCase() === vendorChatState.selectedItem.toLowerCase() && 
                product.city === vendorChatState.city &&
                product.minPrice <= vendorChatState.maxPrice && 
                product.maxPrice >= vendorChatState.minPrice
            );

            if (availableMaterials.length === 0) {
                addBotMessage(vendorChatMessages, `Maaf kijiye, ${vendorChatState.city} mein ${vendorChatState.minPrice}-${vendorChatState.maxPrice} ke range mein ${vendorChatState.selectedItem} uplabdh nahi hai. Kya aap price range badalna chahenge?`, [
                    "Haan, nayi range daalna hai",
                    "Nahi, abhi nahi"
                ]);
                vendorChatState.step = "new_search_decision";
                return;
            }

            addBotMessage(vendorChatMessages, `Yahan ${vendorChatState.city} mein uplabdh ${vendorChatState.selectedItem} ke options hain:`);
            
            availableMaterials.forEach((material, index) => {
                const supplier = suppliersDatabase.suppliers.find(s => s.id === material.supplierId);
                const materialElement = document.createElement("div");
                materialElement.classList.add("material-option");
                materialElement.innerHTML = `
                    <h4>${supplier?.businessName || 'Unknown Supplier'} - ${material.name}</h4>
                    <div class="material-details">
                        <span>Price Range: ₹${material.minPrice}-₹${material.maxPrice}/KG</span>
                        <span>Standard Price: ₹${material.standardPrice}/KG</span>
                        <span>ID: ${index + 1}</span>
                    </div>
                    ${supplier?.email ? `<p>Contact: ${supplier.email}</p>` : ''}
                `;
                materialElement.onclick = function() {
                    addUserMessage(vendorChatMessages, (index + 1).toString());
                    handleVendorResponse((index + 1).toString());
                };
                vendorChatMessages.appendChild(materialElement);
            });

            addBotMessage(vendorChatMessages, "Kripya upar diye gaye options mein se ek ka ID number select karein ya 'Nahi' likhein agar koi pasand nahi aaya.");
            vendorChatState.step = "show_materials";
        }

        function askForEmail() {
            addBotMessage(vendorChatMessages, "Deal proceed karne ke liye, kripya apna email ID share karein taaki hum aapko confirmation bhej sakein.");
            vendorChatState.step = "ask_email";
        }

        function startBargaining() {
            addBotMessage(vendorChatMessages, `Aapne ${vendorChatState.selectedMaterial.name} ₹${vendorChatState.selectedMaterial.standardPrice}/KG ke rate par khareedne ka faisla kiya hai.`);
            
            const bargainingMessage = document.createElement("div");
            bargainingMessage.classList.add("message", "bot-message", "bargaining-message");
            bargainingMessage.textContent = "(Bargaining simulation)";
            vendorChatMessages.appendChild(bargainingMessage);
            
            // Start with the standard price as initial offer
            vendorChatState.currentOffer = vendorChatState.selectedMaterial.standardPrice;
            
            // Suggest bargaining options
            const minPrice = vendorChatState.selectedMaterial.minPrice;
            const maxPrice = vendorChatState.selectedMaterial.maxPrice;
            
            // Calculate some bargaining options
            const options = [
                `Haan, ₹${vendorChatState.currentOffer}/KG par final karo`,
                `Nahi, mujhe ₹${Math.max(minPrice, Math.floor(vendorChatState.currentOffer * 0.9))}/KG chahiye`,
                `Main 5% discount chahta hoon (₹${Math.max(minPrice, Math.floor(vendorChatState.currentOffer * 0.95))}/KG)`
            ];
            
            addBotMessage(vendorChatMessages, "Kya aap is rate par deal final karna chahenge?", options);
            
            vendorChatState.bargaining = true;
            vendorChatState.step = "bargaining";
        }

        async function handleBargaining(message) {
    const material = vendorChatState.selectedMaterial;
    
    // Show typing indicator
    const typingIndicator = document.createElement("div");
    typingIndicator.classList.add("message", "bot-message");
    typingIndicator.innerHTML = `<div style="display: flex; align-items: center; gap: 10px;">
        <div class="spinner"></div>
        <span>Supplier soch raha hai...</span>
    </div>`;
    vendorChatMessages.appendChild(typingIndicator);
    
    try {
        // Get Gemini's response
        const geminiResponse = await negotiateWithGemini(
            {
                name: material.name,
                standardPrice: material.standardPrice,
                minPrice: material.minPrice,
                maxPrice: material.maxPrice
            },
            message
        );
        
        // Remove typing indicator
        vendorChatMessages.removeChild(typingIndicator);
        
        // Check if deal was accepted
        const dealMatch = geminiResponse.match(/DEAL_ACCEPTED:(\d+)/);
        if (dealMatch) {
            const finalPrice = parseInt(dealMatch[1]);
            // Extract just the text before the DEAL_ACCEPTED token
            const responseText = geminiResponse.split('DEAL_ACCEPTED')[0].trim();
            
            // Show supplier's response
            addBotMessage(vendorChatMessages, responseText);
            
            // Close the deal
            closeDeal(finalPrice);
            return;
        }
        
        // If no deal, show supplier's response and continue bargaining
        addBotMessage(vendorChatMessages, geminiResponse);
        
        // Suggest common bargaining options
        const currentPriceMatch = geminiResponse.match(/₹(\d+)/);
        if (currentPriceMatch) {
            const currentPrice = parseInt(currentPriceMatch[1]);
            const options = [
                `Haan, ₹${currentPrice}/KG par final karo`,
                `Nahi, mujhe ₹${Math.max(material.minPrice, Math.floor(currentPrice * 0.95))}/KG chahiye`,
                `Main 10% discount chahta hoon (₹${Math.max(material.minPrice, Math.floor(currentPrice * 0.9))}/KG)`
            ];
            
            const quickReplyContainer = document.createElement("div");
            quickReplyContainer.classList.add("quick-reply");
            
            options.forEach(option => {
                const button = document.createElement("button");
                button.classList.add("quick-reply-btn");
                button.textContent = option;
                button.onclick = function() {
                    addUserMessage(vendorChatMessages, option);
                    handleBargaining(option);
                };
                quickReplyContainer.appendChild(button);
            });
            
            vendorChatMessages.appendChild(quickReplyContainer);
        }
        
    } catch (error) {
        vendorChatMessages.removeChild(typingIndicator);
        addBotMessage(vendorChatMessages, "Maaf kijiye, bargaining mein koi samasya hui. Kripya dobara koshish karein.");
    }
}

function closeDeal(finalPrice) {
    const material = vendorChatState.selectedMaterial;
    const supplier = suppliersDatabase.suppliers.find(s => s.id === material.supplierId);
    
    const dealMessage = document.createElement("div");
    dealMessage.classList.add("deal-closed");
    dealMessage.innerHTML = `
        <p><strong>Deal Final!</strong></p>
        <p>Aapne ${supplier?.businessName || 'Supplier'} se ${vendorChatState.quantity} KG ${vendorChatState.selectedItem} ₹${finalPrice}/KG ke rate par khareeda.</p>
        <p>Total amount: ₹${finalPrice * vendorChatState.quantity}</p>
        <p>Supplier ko aapke email (${vendorChatState.userEmail}) par confirmation bhej di gayi hai.</p>
        ${supplier?.email ? `<p>Supplier ka contact: ${supplier.email}</p>` : ''}
    `;
    vendorChatMessages.appendChild(dealMessage);
    
    // Simulate sending emails
    sendEmail(
        supplier?.email,
        `New Order for ${vendorChatState.selectedItem}`,
        `You have a new order from ${vendorChatState.userEmail}:\n\nItem: ${vendorChatState.selectedItem}\nQuantity: ${vendorChatState.quantity} KG\nPrice: ₹${finalPrice}/KG\nTotal: ₹${finalPrice * vendorChatState.quantity}\n\nPlease contact the vendor at ${vendorChatState.userEmail} to arrange delivery.`
    );
    
    sendEmail(
        vendorChatState.userEmail,
        `Your Order Confirmation for ${vendorChatState.selectedItem}`,
        `Thank you for your order:\n\nItem: ${vendorChatState.selectedItem}\nQuantity: ${vendorChatState.quantity} KG\nPrice: ₹${finalPrice}/KG\nTotal: ₹${finalPrice * vendorChatState.quantity}\n\nSupplier Contact: ${supplier?.email || 'Not available'}\n\nPlease contact the supplier to arrange pickup/delivery.`
    );
    
    addBotMessage(vendorChatMessages, "Kya aap kuch aur khareedna chahenge?", [
        "Haan, nayi search karna hai",
        "Nahi, abhi nahi"
    ]);
    vendorChatState.step = "deal_closed";
}
        function resetVendorToWelcome() {
            vendorChatState = {
                step: "welcome",
                selectedItem: null,
                pincode: null,
                city: null,
                quantity: null,
                minPrice: null,
                maxPrice: null,
                selectedMaterial: null,
                userEmail: null,
                bargaining: false,
                currentOffer: null
            };
            
            addBotMessage(vendorChatMessages, "Achha! Phir se shuru karte hain.");
            addBotMessage(vendorChatMessages, "Kya aap aj kuch khareedna chahenge?", [
                "Haan, onion khareedna hai",
                "Haan, tomato khareedna hai",
                "Haan, paneer khareedna hai",
                "Kuch aur khareedna hai"
            ]);
        }

        function findMaterialById(id) {
            // Get products from the suppliers database
            const availableMaterials = suppliersDatabase.products.filter(product => 
                product.name.toLowerCase() === vendorChatState.selectedItem.toLowerCase() && 
                product.city === vendorChatState.city &&
                product.minPrice <= vendorChatState.maxPrice && 
                product.maxPrice >= vendorChatState.minPrice
            );
            
            return availableMaterials[id - 1]; // Simple index-based lookup for demo
        }

        // =============================================
        // Supplier Bot Implementation
        // =============================================

        // Supplier Chat state
        let supplierChatState = {
            step: "welcome",
            isNewSupplier: null,
            email: null,
            fullName: null,
            businessName: null,
            businessCity: null,
            pincode: null,
            selectedCategories: [],
            productName: null,
            standardPrice: null,
            minPrice: null,
            maxPrice: null
        };

        // DOM elements
        const supplierChatMessages = document.getElementById("supplier-chat-messages");
        const supplierUserInput = document.getElementById("supplier-user-input");
        const supplierSendBtn = document.getElementById("supplier-send-btn");

        // Initialize Supplier chat
        function initializeSupplierBot() {
            addBotMessage(supplierChatMessages, "Namaste! Welcome to SupplierBot. We're excited to help you list your products for vendors to purchase.");
            addBotMessage(supplierChatMessages, "Are you a new supplier or an existing one?", [
                "New supplier",
                "Existing supplier"
            ]);
        }

        // Send message on button click
        supplierSendBtn.addEventListener("click", sendSupplierMessage);

        // Send message on Enter key
        supplierUserInput.addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                sendSupplierMessage();
            }
        });

        function sendSupplierMessage() {
            const message = supplierUserInput.value.trim();
            if (message === "") return;

            addUserMessage(supplierChatMessages, message);
            supplierUserInput.value = "";

            handleSupplierResponse(message);
        }

        function handleSupplierResponse(message) {
            switch (supplierChatState.step) {
                case "welcome":
                    if (message === "New supplier" || message === "Existing supplier") {
                        supplierChatState.isNewSupplier = message === "New supplier";
                        askForSupplierEmail();
                    }
                    break;
                
                case "ask_email":
                    if (validateEmail(message)) {
                        supplierChatState.email = message;
                        if (supplierChatState.isNewSupplier) {
                            askForSupplierPersonalDetails();
                        } else {
                            // In a real app, would verify existing supplier
                            askForProductCategory();
                        }
                    } else {
                        addBotMessage(supplierChatMessages, "Please enter a valid email address. Example: supplier@example.com");
                    }
                    break;
                
                case "ask_personal_details":
                    if (!supplierChatState.fullName) {
                        supplierChatState.fullName = message;
                        addBotMessage(supplierChatMessages, "Thank you. What is your business name?");
                    } else if (!supplierChatState.businessName) {
                        supplierChatState.businessName = message;
                        addBotMessage(supplierChatMessages, "Great! In which city is your business located?");
                    } else if (!supplierChatState.businessCity) {
                        supplierChatState.businessCity = message;
                        addBotMessage(supplierChatMessages, "Please enter your business pincode:");
                    } else if (!supplierChatState.pincode) {
                        const pincode = message.split(" ").find(part => /^\d{6}$/.test(part));
                        if (pincode) {
                            supplierChatState.pincode = pincode;
                            askForProductCategory();
                        } else {
                            addBotMessage(supplierChatMessages, "Please enter a valid 6-digit pincode. Example: 110001");
                        }
                    }
                    break;
                
                case "ask_product_category":
                    if (message === "Done") {
                        if (supplierChatState.selectedCategories.length > 0) {
                            askForProductName();
                        } else {
                            addBotMessage(supplierChatMessages, "Please select at least one category before proceeding.");
                        }
                    } else if (message === "Custom category") {
                        addBotMessage(supplierChatMessages, "Please enter your custom product category:");
                        supplierChatState.step = "ask_custom_category";
                    } else {
                        // Extract category name from button (removing emoji)
                        const categoryName = message.replace(/[^\w\s]/g, '').trim();
                        
                        if (supplierChatState.selectedCategories.includes(categoryName)) {
                            // Remove if already selected
                            supplierChatState.selectedCategories = supplierChatState.selectedCategories.filter(cat => cat !== categoryName);
                            addBotMessage(supplierChatMessages, `Removed ${categoryName} from your selection.`);
                        } else {
                            // Add to selection
                            supplierChatState.selectedCategories.push(categoryName);
                            addBotMessage(supplierChatMessages, `Added ${categoryName} to your selection.`);
                        }
                        
                        // Show updated category selection
                        showCategorySelection();
                    }
                    break;
                
                case "ask_custom_category":
                    supplierChatState.selectedCategories.push(message);
                    addBotMessage(supplierChatMessages, `Added "${message}" to your categories.`);
                    showCategorySelection();
                    supplierChatState.step = "ask_product_category";
                    break;
                
                case "ask_product_name":
                    supplierChatState.productName = message;
                    askForStandardPrice();
                    break;
                
                case "ask_standard_price":
                    const price = parseFloat(message.replace(/[^\d.]/g, ''));
                    if (!isNaN(price)) {
                        supplierChatState.standardPrice = price;
                        askForMinPrice();
                    } else {
                        addBotMessage(supplierChatMessages, "Please enter a valid price. Example: 25 or 30.50");
                    }
                    break;
                
                case "ask_min_price":
                    const minPrice = parseFloat(message.replace(/[^\d.]/g, ''));
                    if (!isNaN(minPrice) && minPrice <= supplierChatState.standardPrice) {
                        supplierChatState.minPrice = minPrice;
                        askForMaxPrice();
                    } else {
                        addBotMessage(supplierChatMessages, `Please enter a valid minimum price that is less than or equal to your standard price (₹${supplierChatState.standardPrice}). Example: ${Math.floor(supplierChatState.standardPrice * 0.8)}`);
                    }
                    break;
                
                case "ask_max_price":
                    const maxPrice = parseFloat(message.replace(/[^\d.]/g, ''));
                    if (!isNaN(maxPrice) && maxPrice >= supplierChatState.minPrice && maxPrice >= supplierChatState.standardPrice) {
                        supplierChatState.maxPrice = maxPrice;
                        confirmProductListing();
                    } else {
                        addBotMessage(supplierChatMessages, `Please enter a valid maximum price that is at least your standard price (₹${supplierChatState.standardPrice}) and minimum price (₹${supplierChatState.minPrice}). Example: ${Math.ceil(supplierChatState.standardPrice * 1.2)}`);
                    }
                    break;
                
                case "confirm_listing":
                    if (message.toLowerCase().includes("yes")) {
                        saveProductListing();
                    } else {
                        addBotMessage(supplierChatMessages, "Let's start over then.");
                        resetToProductCategory();
                    }
                    break;
            }
        }

        function askForSupplierEmail() {
            addBotMessage(supplierChatMessages, "Please provide your email address for communication and verification:");
            supplierChatState.step = "ask_email";
        }

        function askForSupplierPersonalDetails() {
            addBotMessage(supplierChatMessages, "Let's collect some basic information to create your supplier profile.");
            addBotMessage(supplierChatMessages, "What is your full name?");
            supplierChatState.step = "ask_personal_details";
        }

        function askForProductCategory() {
            addBotMessage(supplierChatMessages, "What product categories do you deal in? (Select one or more)", [
                "🍎 Fruits",
                "🥦 Vegetables",
                "🧀 Dairy Products",
                "🛒 Grocery Items",
                "🌾 Grains",
                "Custom category",
                "Done"
            ]);
            
            // Show current selection if any
            if (supplierChatState.selectedCategories.length > 0) {
                showCategorySelection();
            }
            
            supplierChatState.step = "ask_product_category";
        }

        function showCategorySelection() {
            if (supplierChatState.selectedCategories.length > 0) {
                addBotMessage(supplierChatMessages, `Currently selected categories: ${supplierChatState.selectedCategories.join(", ")}`);
            } else {
                addBotMessage(supplierChatMessages, "No categories selected yet.");
            }
        }

        function askForProductName() {
            addBotMessage(supplierChatMessages, "Please enter the name of the product you want to list (e.g., 'Onion' or 'Paneer'):");
            supplierChatState.step = "ask_product_name";
        }

        function askForStandardPrice() {
            addBotMessage(supplierChatMessages, `What is your standard selling price per KG/unit for ${supplierChatState.productName}?`);
            supplierChatState.step = "ask_standard_price";
        }

        function askForMinPrice() {
            addBotMessage(supplierChatMessages, "To enable bargaining, what is the minimum price you would accept? (This should be less than your standard price)");
            supplierChatState.step = "ask_min_price";
        }

        function askForMaxPrice() {
            addBotMessage(supplierChatMessages, "What is the maximum price you would expect? (This should be at least your standard price)");
            supplierChatState.step = "ask_max_price";
        }

        function confirmProductListing() {
            addBotMessage(supplierChatMessages, "Please review your product listing:");
            
            const reviewMessage = document.createElement("div");
            reviewMessage.classList.add("message", "bot-message");
            reviewMessage.innerHTML = `
                <p><strong>Product:</strong> ${supplierChatState.productName}</p>
                <p><strong>Categories:</strong> ${supplierChatState.selectedCategories.join(", ")}</p>
                <p><strong>Standard Price:</strong> ₹${supplierChatState.standardPrice}/KG</p>
                <p><strong>Price Range:</strong> ₹${supplierChatState.minPrice}-₹${supplierChatState.maxPrice}/KG</p>
                <p><strong>Business:</strong> ${supplierChatState.businessName}, ${supplierChatState.businessCity} (${supplierChatState.pincode})</p>
            `;
            supplierChatMessages.appendChild(reviewMessage);
            
            addBotMessage(supplierChatMessages, "Does this look correct? You'll be able to add more products later.", [
                "Yes, list my product",
                "No, I need to make changes"
            ]);
            
            supplierChatState.step = "confirm_listing";
        }

        function saveProductListing() {
            // Generate a unique ID for the supplier (in real app, use Firebase auto-ID)
            const supplierId = 'supplier-' + Math.random().toString(36).substr(2, 9);
            
            // Check if supplier already exists
            let supplier = suppliersDatabase.suppliers.find(s => s.email === supplierChatState.email);
            
            if (!supplier) {
                // Create new supplier
                supplier = {
                    id: supplierId,
                    email: supplierChatState.email,
                    fullName: supplierChatState.fullName,
                    businessName: supplierChatState.businessName,
                    businessCity: supplierChatState.businessCity,
                    pincode: supplierChatState.pincode,
                    dateRegistered: new Date().toISOString()
                };
                suppliersDatabase.suppliers.push(supplier);
            }
            
            // Add product listing
            const productId = 'product-' + Math.random().toString(36).substr(2, 9);
            const product = {
                id: productId,
                supplierId: supplier.id,
                name: supplierChatState.productName,
                categories: supplierChatState.selectedCategories,
                standardPrice: supplierChatState.standardPrice,
                minPrice: supplierChatState.minPrice,
                maxPrice: supplierChatState.maxPrice,
                city: supplierChatState.businessCity,
                pincode: supplierChatState.pincode,
                dateListed: new Date().toISOString(),
                status: "active"
            };
            suppliersDatabase.products.push(product);
            
            // Save to localStorage
            localStorage.setItem('suppliersDatabase', JSON.stringify(suppliersDatabase));
            
            // Show success message
            const successMessage = document.createElement("div");
            successMessage.classList.add("success-message");
            successMessage.innerHTML = `
                <p>✅ Your product has been successfully listed!</p>
                <p>Vendors in ${supplierChatState.businessCity} will now be able to see and negotiate for ${supplierChatState.productName}.</p>
                <p>You'll be notified via email when any vendor shows interest or a deal is finalized.</p>
                <p>Thank you for joining us!</p>
            `;
            supplierChatMessages.appendChild(successMessage);
            
            // Reset for next product
            resetToProductCategory();
        }

        function resetToProductCategory() {
            // Clear product-specific fields but keep supplier info
            supplierChatState.selectedCategories = [];
            supplierChatState.productName = null;
            supplierChatState.standardPrice = null;
            supplierChatState.minPrice = null;
            supplierChatState.maxPrice = null;
            
            addBotMessage(supplierChatMessages, "Would you like to list another product?", [
                "Yes, list another product",
                "No, I'm done for now"
            ]);
            
            supplierChatState.step = "welcome";
        }

        // =============================================
        // Switching Between Bots
        // =============================================

        document.getElementById('supplier-link').addEventListener('click', function(e) {
            e.preventDefault();
            document.getElementById('vendor-bot').classList.add('hidden');
            document.getElementById('supplier-bot').classList.remove('hidden');
            if (supplierChatMessages.children.length === 0) {
                initializeSupplierBot();
            }
        });

        document.getElementById('vendor-link').addEventListener('click', function(e) {
            e.preventDefault();
            document.getElementById('supplier-bot').classList.add('hidden');
            document.getElementById('vendor-bot').classList.remove('hidden');
            if (vendorChatMessages.children.length === 0) {
                initializeVendorBot();
            }
        });

        // Initialize Vendor Bot when page loads
        initializeVendorBot();
    </script>
</body>
</html>